node {
    deleteDir();
        try {
                
                clonerepo(env.git_pipeline_server, env.git_pipeline_repo, env.git_pipeline_user, env.git_pipeline_branch);
        	    //def thoughtworks_template_cd = load "devops/Jenkins/template-pipeline/CD_single_pipeline_template.groovy"
		        thoughtworks_template_cd.pipelineTemplateCD();
        } catch (Exception e) {
                throw e;
        } finally {

        }
}
def clonerepo(server,repo,user,branch) {
        //withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'user-jenkins', \
                                                 //keyFileVariable: 'user-jenkins')]) {
        sh "git clone -b ${branch} ${user}@${server}:${repo}"
        println "cloned repo successfully"
        }

}

def helmDeploy(kubernetes_credential_id,kubernetes_cluster_url,namespace,app_name,chart_name,chart_path) {
        dir('devops/Helm-Charts/Helm-Charts-PS2') {
                withKubeConfig([credentialsId: "${kubernetes_credential_id}", serverUrl: "${kubernetes_cluster_url}"]) {

                sh "helm list -n brmps2 && helm install -n ${namespace} ${app_name} ${chart_name} -f ${chart_path}"


                }
        }
}
def pipelineTemplateCD() {
try {
        //Loading common groovy utilities file to a variable
    def commonUtils = load "devops/Jenkins/common-utility/common.groovy"
	def props = readProperties file: 'source_repo/BRM_source/BRM-source/control/config.properties'
	stage("Ticketing") {
                                        
                        }
		
	parallel( firstBranch: {
        if ("${props.mysql}" == "true") {
           stage("Deploy-k8s Dev") {
                        try {
                                //println "Deploying the application using helm"
                               //commonUtils.helmDeploy(env.kubernetes_credential_id, env.kubernetes_cluster_url, env.namespace, env.app_name, env.chart_name, env.chart_path)
								
                        } catch(Exception e) {
                                throw e;
                        }
                }	
        } else {
            println "error in first branch"
        }
    },secondBranch: {
           if ("${props.dm}" == "true") {
				stage("Deploy-k8s Dev") {
                        try {helmDeploy(env.kubernetes_credential_id, env.kubernetes_cluster_url, env.namespace, env.app_name, env.chart_name, env.chart_path)
                                //println "Deploying the application using helm
                               //commonUtils.helmDeploy(env.kubernetes_credential_id, env.kubernetes_cluster_url, env.namespace, env.app_name, env.chart_name, env.chart_path)
                                helmDeploy(env.kubernetes_credential_id, env.kubernetes_cluster_url, env.namespace, env.app_name, env.chart_name, env.chart_path)
								
                        } catch(Exception e) {
                                //Updating redmine ticket along with the error message
                                
                                throw e;
                        }
                }
        } else {
            println "error in second branch"
        }
    }
      
        } catch (Exception e) {
                throw e
        } finally {
                //deleteDir();
        }
}
return this;







